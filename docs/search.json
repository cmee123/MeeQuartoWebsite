[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cathal Mee",
    "section": "",
    "text": "Website Code\nCathal Mee, from St. Paul, Minnesota, is a dedicated tennis player, entrepreneur, and computer science student with a passion for sustainability and innovation in sports. As a college tennis player, he balances his academic pursuits in environmental science, sustainability, and computer science with his love for the game.\nHe is the co-founder of Roseville Tennis Camps, a community-driven program that offers affordable and inclusive tennis lessons for juniors and adults in Roseville, Minnesota. With an emphasis on skill development and social interaction, Cathal and his co-founder, Pedro, strive to make tennis more accessible compared to traditional programs.\nCathal is also passionate about fishing and game development, currently working on Spot-A-Fish, an app for anglers to log their catches, as well as a fishing-themed game inspired by Cookie Clicker. Whether on the court, at the stringing machine, or coding his next project, he is always looking for ways to merge his interests in technology, sports, and sustainability."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "MP1.html",
    "href": "MP1.html",
    "title": "Mini Project 1",
    "section": "",
    "text": "library(tidyverse)\nlibrary(maps)\nlibrary(viridis)\nlibrary(leaflet)\n\nlibrary(htmltools)\nlibrary(glue)\n\n\nImport dataset\n\ndriving &lt;- read_csv(\"Licensed_Driver_Dashboard_Data.csv\")\n\ndriving &lt;- driving |&gt; \n  filter(Year == 2019) |&gt;\n  mutate(State = str_to_lower(State))\n  \nfemale_totals &lt;- driving |&gt; \n  filter(Sex == \"Female\") |&gt; \n  group_by(State) |&gt; \n  summarise(female_total = sum(Drivers))\n  \n\ndrivingTotals &lt;- driving |&gt; \n  group_by(State) |&gt; \n  summarise(total = sum(Drivers)) |&gt; \n  mutate(total_rounded = total/1000) |&gt; \n  full_join(female_totals) |&gt; \n  mutate(pct_female = trunc((female_total / total)*10^4)/10^4) |&gt; \n  mutate(majority_female = ifelse(pct_female &gt;= 0.50, \"Majority Female\", \"Majority Male\"))\n\n\n\nMap 1\n\nus_states &lt;- map_data(\"state\")\n\ndrivingTotals |&gt;\n  right_join(us_states, by = c(\"State\" = \"region\")) |&gt;\n  rename(region = State) |&gt;\n  ggplot(mapping = aes(x = long, y = lat,\n                          group = group)) + \n  geom_polygon(aes(fill = total_rounded), color = \"black\") +\n  theme_void() +\n  scale_fill_viridis() +\n  labs(\n    fill = \"Total Drivers (Thousands)\",\n    title = \"Distribution of Total Drivers in the United States\",\n    caption = \"https://catalog.data.gov/dataset/licensed-drivers-by-state-gender-and-age-group\"\n  )\n\n\n\n\n\n\n\n\nThis map shows us how many total drivers are in each state. We can see that states with higher populations and larger urban areas (California, Texas, Florida) have more licensed drivers.\n\n\nInteractive Map 1\n\nlibrary(sf) \nstates &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\")\n\nstates &lt;- states |&gt; \n  mutate(name = str_to_lower(name))\n\ntotalInteractiveMap &lt;- states |&gt;\n  left_join(drivingTotals, by = c(\"name\" = \"State\")) |&gt; \n  mutate(labels = str_c(name, \": \", total_rounded, \" drivers, in thousands\"))\n\nbins &lt;- c(100, 500, 1000, 2000, 4000, 7000, 10000, 20000, Inf)\npal &lt;- colorBin(\"YlOrRd\", domain = totalInteractiveMap$total_rounded, bins = bins)\n\nlabels &lt;- lapply(totalInteractiveMap$labels, HTML)\n\nleaflet(totalInteractiveMap) %&gt;%\n  setView(-96, 37.8, 4) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(total_rounded),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 2,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) %&gt;%\n  addLegend(pal = pal, values = ~total_rounded, opacity = 0.7, title = NULL,\n    position = \"bottomright\")\n\n\n\n\n\n\n\nMap 2\n\ndrivingTotals |&gt;\n  right_join(us_states, by = c(\"State\" = \"region\")) |&gt;\n  rename(region = State) |&gt;\n  ggplot(mapping = aes(x = long, y = lat,\n                          group = group)) + \n  geom_polygon(aes(fill = majority_female), color = \"black\") +\n  theme_void() +\n  scale_fill_manual(values = c(\"purple\", \"green\")) +\n  labs(\n    fill = \"Driver Distribution\",\n    title = \"Distribution of Male and Female Drivers in the United States\",\n    caption = \"https://catalog.data.gov/dataset/licensed-drivers-by-state-gender-and-age-group\"\n  )\n\n\n\n\n\n\n\n\nThis is a coded map showing the distribution of male and female drivers for all contiguous states in the US. The variable displayed is categorical, with the 2 categories being “Majority Female” and “Majority Male”. Based on this graph, we can see that most states have a majority female population of drivers. The south west, pacific northwest, and Midwest regions are almost all majority male drivers, and almost every other state is a majority female.\n\n\nInteractive Map 2\n\ntotalInteractiveMap &lt;- states |&gt;\n  left_join(drivingTotals, by = c(\"name\" = \"State\")) |&gt; \n  mutate(labels2 = str_c(name, \": \", (pct_female*100), \"% of driver population is female\"))\n\nfactpal &lt;- colorFactor(c(\"purple\", \"green\"),\n                       levels(totalInteractiveMap$majority_female))\n\nlabels2 &lt;- lapply(totalInteractiveMap$labels2, HTML)\n\nleaflet(totalInteractiveMap) %&gt;%\n  setView(-96, 37.8, 4) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~factpal(totalInteractiveMap$majority_female),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 2,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels2,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) %&gt;%\n  addLegend(pal = factpal, values = ~majority_female, opacity = 0.7, title = NULL,\n    position = \"bottomright\")"
  },
  {
    "objectID": "MP2.html",
    "href": "MP2.html",
    "title": "Mini Project 2",
    "section": "",
    "text": "# libraries\nlibrary(httr2)\nlibrary(stringr)\nlibrary(jsonlite)\n\nWe chose to gather data from the openFDA API. This API serves public data from the Food and Drug Administration about drugs, devices, and foods. It only has publicly available data, so there are no sensitive personal details. We hope to use this data to show a correlation between age or sex and certain adverse effects. We also want to see if some drugs are more likely to cause serious side effects compared to other drugs, and what reactions are most common.\nWe chose to scrape reports about adverse drug effects on patients, and filter to only include instances where the patient had severe side effects (Death, life threatening condition, hospitalization, etc). Each report has a unique report ID, details about the patients age and sex, what drug they used, how serious the side effects were, and what their reaction to the drug was. We can group the data by age group, sex, medication name, and create plots to show the size of each group and see if there is a causal relationship between 2 or more of the variables.\n\nQuerying the FDA Open API\n\n#Function to get data from the API. 2000 - 2020, numObservations &lt;= 1000\n\nget_fda_data &lt;- function(startYear, endYear, numObservations) {\n  \n  # make the request\n  endpoint &lt;- \"https://api.fda.gov/drug/event.json\"\n  \n  req &lt;- request(str_c(\n    endpoint,  \n    \"?api_key=\", key, \n    \"&search=serious:\\\"1\\\"+AND+receivedate:[\", \n    startYear, \n    \"0101+TO+\", \n    endYear, \n    \"1231]&limit=\",\n    numObservations\n  ))\n  resp &lt;- req_perform(req)\n  \n  # if json is desired\n  resp &lt;- resp |&gt;\n    resp_body_json()\n  \n  reportId = double()\n  patientAge = double()\n  patientSex = double()\n  reaction = character()\n  drugName = character()\n  drugIndication = character()\n  \n  for(i in 1:numObservations) {\n    \n    reportId[i-1] &lt;- resp$results[[i]]$safetyreportid\n    \n    if(is.null(resp$results[[i]]$patient$patientonsetage)) {\n      patientAge[i-1] &lt;- NA \n    } else {\n      patientAge[i-1] &lt;- resp$results[[i]]$patient$patientonsetage\n    }\n    \n    if(is.null(resp$results[[i]]$patient$patientsex)) {\n      patientSex[i-1] &lt;- NA\n    } else {\n      patientSex[i-1] &lt;- resp$results[[i]]$patient$patientsex\n    }\n    \n    if(length(resp$results[[i]]$patient$reaction) == 2) {\n      reaction[i-1] &lt;- str_c(resp$results[[i]]$patient$reaction[[1]]\n                             $reactionmeddrapt, \", \",resp$results[[i]]$\n                               patient$reaction[[2]]$reactionmeddrapt)\n    } else if(length(resp$results[[i]]$patient$reaction) == 1) {\n      reaction[i-1] &lt;- resp$results[[i]]$patient$reaction[[1]]$reactionmeddrapt\n    } else {\n      reaction[i-1] &lt;- \"\"\n    }\n    \n    drugName[i-1] &lt;- resp$results[[i]]$patient$drug[[1]]$medicinalproduct\n    \n  }\n  \n  drug_tbl &lt;- tibble(\n    reportId = parse_number(reportId),\n    patientAge = parse_number(patientAge),\n    patientSex = parse_number(patientSex),\n    drugName = drugName,\n    reaction = reaction\n  )\n  \n  drug_tbl\n  \n}\n\n# Get the data tibbles from the API\ndrugs &lt;- get_fda_data(2010, 2019, 1000)\ndrugs2 &lt;- get_fda_data(2000, 2009, 1000)\n\n# Join multiple tables\ndrugs &lt;- drugs |&gt; \n  full_join(drugs2)\n\n# Write the csv file\nwrite.csv(drugs, \"drugs_tbl.csv\")\n\n\n\nOur Data:\n\nlibrary(tidyverse)\n\ndrugs &lt;- read.csv(\"drugs_tbl.csv\")\n\ndrugs |&gt; \n  slice_head(n=6)\n\n  X reportId patientAge patientSex   drugName\n1 1 10003301         NA          2  IBUPROFEN\n2 2 10003311         76          2   LETAIRIS\n3 3 10003312         43          2     ILARIS\n4 4 10003315         NA          1 RANOLAZINE\n5 5 10003317         46          1   BENLYSTA\n6 6 10003318         59          2  BELIMUMAB\n                                reaction\n1            Dyspepsia, Renal impairment\n2     Oedema peripheral, Fluid retention\n3            Pneumonia, Drug ineffective\n4                                  Death\n5                                       \n6 Tuberculosis of central nervous system"
  },
  {
    "objectID": "projects/MiniProject1/MP1.html",
    "href": "projects/MiniProject1/MP1.html",
    "title": "Mini Project 1",
    "section": "",
    "text": "Mini Project 1 explores data from the United States government regarding the population of licensed drivers in the US. Below are 2 static maps and 2 interactive maps showing the distribution of driver population size and proportion of male vs female drivers across every state.\n\n\nCode\nlibrary(tidyverse)\nlibrary(maps)\nlibrary(viridis)\nlibrary(leaflet)\n\nlibrary(htmltools)\nlibrary(glue)\n\n\n\nImport dataset\n\n\nCode\ndriving &lt;- read_csv(\"Licensed_Driver_Dashboard_Data.csv\")\n\ndriving &lt;- driving |&gt; \n  filter(Year == 2019) |&gt;\n  mutate(State = str_to_lower(State))\n  \nfemale_totals &lt;- driving |&gt; \n  filter(Sex == \"Female\") |&gt; \n  group_by(State) |&gt; \n  summarise(female_total = sum(Drivers))\n  \n\ndrivingTotals &lt;- driving |&gt; \n  group_by(State) |&gt; \n  summarise(total = sum(Drivers)) |&gt; \n  mutate(total_rounded = total/1000) |&gt; \n  full_join(female_totals) |&gt; \n  mutate(pct_female = trunc((female_total / total)*10^4)/10^4) |&gt; \n  mutate(majority_female = ifelse(pct_female &gt;= 0.50, \"Majority Female\", \"Majority Male\"))\n\n\n\n\nMap 1\n\n\nCode\nus_states &lt;- map_data(\"state\")\n\ndrivingTotals |&gt;\n  right_join(us_states, by = c(\"State\" = \"region\")) |&gt;\n  rename(region = State) |&gt;\n  ggplot(mapping = aes(x = long, y = lat,\n                          group = group)) + \n  geom_polygon(aes(fill = total_rounded), color = \"black\") +\n  theme_void() +\n  scale_fill_viridis() +\n  labs(\n    fill = \"Total Drivers (Thousands)\",\n    title = \"Distribution of Total Drivers in the United States\",\n    caption = \"https://catalog.data.gov/dataset/licensed-drivers-by-state-gender-and-age-group\"\n  )\n\n\n\n\n\n\n\n\n\nThis map shows us how many total drivers are in each state. We can see that states with higher populations and larger urban areas (California, Texas, Florida) have more licensed drivers.\n\n\nInteractive Map 1\n\n\nCode\nlibrary(sf) \nstates &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\")\n\nstates &lt;- states |&gt; \n  mutate(name = str_to_lower(name))\n\ntotalInteractiveMap &lt;- states |&gt;\n  left_join(drivingTotals, by = c(\"name\" = \"State\")) |&gt; \n  mutate(labels = str_c(name, \": \", total_rounded, \" drivers, in thousands\"))\n\nbins &lt;- c(100, 500, 1000, 2000, 4000, 7000, 10000, 20000, Inf)\npal &lt;- colorBin(\"YlOrRd\", domain = totalInteractiveMap$total_rounded, bins = bins)\n\nlabels &lt;- lapply(totalInteractiveMap$labels, HTML)\n\nleaflet(totalInteractiveMap) %&gt;%\n  setView(-96, 37.8, 4) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(total_rounded),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 2,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) %&gt;%\n  addLegend(pal = pal, values = ~total_rounded, opacity = 0.7, title = NULL,\n    position = \"bottomright\")\n\n\n\n\n\n\n\n\nMap 2\n\n\nCode\ndrivingTotals |&gt;\n  right_join(us_states, by = c(\"State\" = \"region\")) |&gt;\n  rename(region = State) |&gt;\n  ggplot(mapping = aes(x = long, y = lat,\n                          group = group)) + \n  geom_polygon(aes(fill = majority_female), color = \"black\") +\n  theme_void() +\n  scale_fill_manual(values = c(\"purple\", \"green\")) +\n  labs(\n    fill = \"Driver Distribution\",\n    title = \"Distribution of Male and Female Drivers in the United States\",\n    caption = \"https://catalog.data.gov/dataset/licensed-drivers-by-state-gender-and-age-group\"\n  )\n\n\n\n\n\n\n\n\n\nThis is a coded map showing the distribution of male and female drivers for all contiguous states in the US. The variable displayed is categorical, with the 2 categories being “Majority Female” and “Majority Male”. Based on this graph, we can see that most states have a majority female population of drivers. The south west, pacific northwest, and Midwest regions are almost all majority male drivers, and almost every other state is a majority female.\n\n\nInteractive Map 2\n\n\nCode\ntotalInteractiveMap &lt;- states |&gt;\n  left_join(drivingTotals, by = c(\"name\" = \"State\")) |&gt; \n  mutate(labels2 = str_c(name, \": \", (pct_female*100), \"% of driver population is female\"))\n\nfactpal &lt;- colorFactor(c(\"purple\", \"green\"),\n                       levels(totalInteractiveMap$majority_female))\n\nlabels2 &lt;- lapply(totalInteractiveMap$labels2, HTML)\n\nleaflet(totalInteractiveMap) %&gt;%\n  setView(-96, 37.8, 4) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~factpal(totalInteractiveMap$majority_female),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 2,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels2,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) %&gt;%\n  addLegend(pal = factpal, values = ~majority_female, opacity = 0.7, title = NULL,\n    position = \"bottomright\")"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Mini Project 2\n\n\n\n\n\n\n\n\n\n\n\nMar 20, 2025\n\n\nCathal Mee, Dan Evans\n\n\n\n\n\n\n\n\n\n\n\n\nMini Project 4\n\n\n\n\n\n\n\n\n\n\n\nMar 20, 2025\n\n\nCathal Mee\n\n\n\n\n\n\n\n\n\n\n\n\nMini Project 1\n\n\n\n\n\n\n\n\n\n\n\nFeb 20, 2025\n\n\nCathal Mee\n\n\n\n\n\n\n\n\n\n\n\n\nThe Most Important Factors in Determining Human Development\n\n\n\n\n\n\n\n\n\n\n\nNov 8, 2024\n\n\nEmma Clift & Cathal Mee\n\n\n\n\n\n\n\n\n\n\n\n\nThe US and EU Used Car Markets\n\n\n\n\n\n\n\n\n\n\n\nMay 8, 2024\n\n\nCathal Mee, Biren Katyal\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/MiniProject2/MP2.html",
    "href": "projects/MiniProject2/MP2.html",
    "title": "Mini Project 2",
    "section": "",
    "text": "This project explores how to scrape data using APIs, clean the results, and conduct a basic EDA. We chose to collect data from the Food and Drug Administration’s API about adverse side effects of various medications.\n\n\nCode\n# libraries\nlibrary(httr2)\nlibrary(stringr)\nlibrary(jsonlite)\nlibrary(tidyverse)\n\n\n\nIntroduction\nWe chose to gather data from the openFDA API. This API serves public data from the Food and Drug Administration about drugs, devices, and foods. It only has publicly available data, so there are no sensitive personal details. We hope to use this data to show a correlation between age or sex and certain adverse effects. We also want to see if some drugs are more likely to cause serious side effects compared to other drugs, and what reactions are most common.\nThus, we decided to scrape reports about adverse drug effects on patients, and filter to only include instances where the patient had severe side effects (Death, life threatening condition, hospitalization, etc). Each report has a unique report ID, details about the patients age and sex, what drug they used, how serious the side effects were, and what their reaction to the drug was. We can group the data by age group, sex, medication name, and create plots to show the size of each group and see if there is a causal relationship between 2 or more of the variables.\n\n\nCode\n#key &lt;- readLines(\"api_token\") #Daniel key\nkey &lt;- \"PDPhCwLKWX5EzEoCNrgEhaeVfK5ojIypQOHraqB8\" #Cathal key (shhh)\n\n\n\n\nQuerying the FDA Open API\n\n\nCode\n#Function to get data from the API. 2000 - 2020, numObservations &lt;= 1000\n\nget_fda_data &lt;- function(startYear, endYear, numObservations) {\n  \n  # make the request\n  endpoint &lt;- \"https://api.fda.gov/drug/event.json\"\n  \n  req &lt;- request(str_c(\n    endpoint,  \n    \"?api_key=\", key, \n    \"&search=serious:\\\"1\\\"+AND+receivedate:[\", \n    startYear, \n    \"0101+TO+\", \n    endYear, \n    \"1231]&limit=\",\n    numObservations\n  ))\n  resp &lt;- req_perform(req)\n  \n  # if json is desired\n  resp &lt;- resp |&gt;\n    resp_body_json()\n  \n  reportId = double()\n  patientAge = double()\n  patientSex = double()\n  reaction = character()\n  drugName = character()\n  drugIndication = character()\n  \n  for(i in 1:numObservations) {\n    \n    reportId[i-1] &lt;- resp$results[[i]]$safetyreportid\n    \n    if(is.null(resp$results[[i]]$patient$patientonsetage)) {\n      patientAge[i-1] &lt;- NA \n    } else {\n      patientAge[i-1] &lt;- resp$results[[i]]$patient$patientonsetage\n    }\n    \n    if(is.null(resp$results[[i]]$patient$patientsex)) {\n      patientSex[i-1] &lt;- NA\n    } else {\n      patientSex[i-1] &lt;- resp$results[[i]]$patient$patientsex\n    }\n    \n    if(length(resp$results[[i]]$patient$reaction) == 2) {\n      reaction[i-1] &lt;- str_c(resp$results[[i]]$patient$reaction[[1]]\n                             $reactionmeddrapt, \", \",resp$results[[i]]$\n                               patient$reaction[[2]]$reactionmeddrapt)\n    } else if(length(resp$results[[i]]$patient$reaction) == 1) {\n      reaction[i-1] &lt;- resp$results[[i]]$patient$reaction[[1]]$reactionmeddrapt\n    } else {\n      reaction[i-1] &lt;- \"\"\n    }\n    \n    drugName[i-1] &lt;- resp$results[[i]]$patient$drug[[1]]$medicinalproduct\n    \n  }\n  \n  drug_tbl &lt;- tibble(\n    reportId = parse_number(reportId),\n    patientAge = parse_number(patientAge),\n    patientSex = parse_number(patientSex),\n    drugName = drugName,\n    reaction = reaction\n  )\n  \n  drug_tbl\n  \n}\n\n# Get the data tibbles from the API\ndrugs &lt;- get_fda_data(2010, 2019, 1000)\ndrugs2 &lt;- get_fda_data(2000, 2009, 1000)\n\n# Join multiple tables\ndrugs &lt;- drugs |&gt; \n  full_join(drugs2)\n\n# Write the csv file\nwrite.csv(drugs, \"drugs_tbl.csv\")\n\n\nOur Data:\n\n\nCode\nlibrary(tidyverse)\n\ndrugs &lt;- read.csv(\"drugs_tbl.csv\")\n\ndrugs |&gt; \n  slice_head(n=6)\n\n\n  X reportId patientAge patientSex   drugName\n1 1 10003301         NA          2  IBUPROFEN\n2 2 10003311         76          2   LETAIRIS\n3 3 10003312         43          2     ILARIS\n4 4 10003315         NA          1 RANOLAZINE\n5 5 10003317         46          1   BENLYSTA\n6 6 10003318         59          2  BELIMUMAB\n                                reaction\n1            Dyspepsia, Renal impairment\n2     Oedema peripheral, Fluid retention\n3            Pneumonia, Drug ineffective\n4                                  Death\n5                                       \n6 Tuberculosis of central nervous system\n\n\n\n\nDemonstrations of the Data\n\n\nCode\nlibrary(treemapify)\n\n\nWarning: package 'treemapify' was built under R version 4.4.3\n\n\nCode\ndrugs |&gt;\n  mutate(drugName = as.character(fct_lump_n(drugName, 100))) |&gt;\n  group_by(drugName) |&gt;\n  summarize(n = n()) |&gt;\n  mutate(drugName = ifelse(\n    nchar(drugName)&gt;7, \n    str_c(substr(drugName, start=1, stop=4), \"…\"),\n    drugName\n  )) |&gt;\n  ggplot(aes(area = n, fill = drugName, label = drugName)) +\n    geom_treemap() +\n    geom_treemap_text(colour = \"white\", place = \"centre\") +\n    labs(title = \"Drug Representation Among Serious Effects\") +\n    theme_minimal() +\n    scale_fill_viridis_d(option = \"G\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\ndrugs |&gt;\n  filter(reaction == \"Death\") |&gt;\n  mutate(drugName = as.character(fct_lump_min(drugName, 1))) |&gt;\n  group_by(drugName) |&gt;\n  summarize(n = n()) |&gt;\n  mutate(drugName = ifelse(\n    nchar(drugName)&gt;10, \n    str_c(substr(drugName, start=1, stop=6), \"…\"),\n    drugName\n  )) |&gt;\n  ggplot(aes(area = n, fill = drugName, label = drugName)) +\n    geom_treemap() +\n    geom_treemap_text(colour = \"white\", place = \"centre\") +\n    labs(title = \"Drug Representation Among Deaths\") +\n    theme_minimal() +\n    scale_fill_viridis_d(option = \"A\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThese tree maps give some indication of which drugs caused the most serious side effects. In both plots, we can see that the distribution is relatively even among the drugs, as it seems that most of them only occur one or two times. Lipitor stands out as having the most incidents, and we can see that it also has one death associated with it in the second plot. This plot also reveals that Glivec, while it had appeared benign enough, actually caused the highest number of deaths in the data.\n\n\nCode\ndrugs |&gt;\n  filter(!is.na(patientAge) & patientAge &lt; 100) |&gt;\n  ggplot(aes(x = patientAge)) +\n    geom_density(fill = \"lavender\", color = \"darkblue\", size = 1) + \n    theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nUnsurprisingly, the most common age for incidents in the data set is in the sixties. However, this plot also highlights that some of the drugs affected children."
  },
  {
    "objectID": "projects/MiniProject2/MP2_2.html",
    "href": "projects/MiniProject2/MP2_2.html",
    "title": "MP2_2",
    "section": "",
    "text": "# libraries\nlibrary(httr2)\nlibrary(stringr)\nlibrary(jsonlite)\nlibrary(tidyverse)\n\nWe chose to gather data from the openFDA API. This API serves public data from the Food and Drug Administration about drugs, devices, and foods. It only has publicly available data, so there are no sensitive personal details. We hope to use this data to show a correlation between age or sex and certain adverse effects. We also want to see if some drugs are more likely to cause serious side effects compared to other drugs, and what reactions are most common.\nThus, we decided to scrape reports about adverse drug effects on patients, and filter to only include instances where the patient had severe side effects (Death, life threatening condition, hospitalization, etc). Each report has a unique report ID, details about the patients age and sex, what drug they used, how serious the side effects were, and what their reaction to the drug was. We can group the data by age group, sex, medication name, and create plots to show the size of each group and see if there is a causal relationship between 2 or more of the variables.\n\n#key &lt;- readLines(\"api_token\") #Daniel key\nkey &lt;- \"PDPhCwLKWX5EzEoCNrgEhaeVfK5ojIypQOHraqB8\" #Cathal key (shhh)\n\n\nQuerying the FDA Open API\n\n#Function to get data from the API. 2000 - 2020, numObservations &lt;= 1000\n\nget_fda_data &lt;- function(startYear, endYear, numObservations) {\n  \n  # make the request\n  endpoint &lt;- \"https://api.fda.gov/drug/event.json\"\n  \n  req &lt;- request(str_c(\n    endpoint,  \n    \"?api_key=\", key, \n    \"&search=serious:\\\"1\\\"+AND+receivedate:[\", \n    startYear, \n    \"0101+TO+\", \n    endYear, \n    \"1231]&limit=\",\n    numObservations\n  ))\n  resp &lt;- req_perform(req)\n  \n  # if json is desired\n  resp &lt;- resp |&gt;\n    resp_body_json()\n  \n  reportId = double()\n  patientAge = double()\n  patientSex = double()\n  reaction = character()\n  drugName = character()\n  drugIndication = character()\n  \n  for(i in 1:numObservations) {\n    \n    reportId[i-1] &lt;- resp$results[[i]]$safetyreportid\n    \n    if(is.null(resp$results[[i]]$patient$patientonsetage)) {\n      patientAge[i-1] &lt;- NA \n    } else {\n      patientAge[i-1] &lt;- resp$results[[i]]$patient$patientonsetage\n    }\n    \n    if(is.null(resp$results[[i]]$patient$patientsex)) {\n      patientSex[i-1] &lt;- NA\n    } else {\n      patientSex[i-1] &lt;- resp$results[[i]]$patient$patientsex\n    }\n    \n    if(length(resp$results[[i]]$patient$reaction) == 2) {\n      reaction[i-1] &lt;- str_c(resp$results[[i]]$patient$reaction[[1]]\n                             $reactionmeddrapt, \", \",resp$results[[i]]$\n                               patient$reaction[[2]]$reactionmeddrapt)\n    } else if(length(resp$results[[i]]$patient$reaction) == 1) {\n      reaction[i-1] &lt;- resp$results[[i]]$patient$reaction[[1]]$reactionmeddrapt\n    } else {\n      reaction[i-1] &lt;- \"\"\n    }\n    \n    drugName[i-1] &lt;- resp$results[[i]]$patient$drug[[1]]$medicinalproduct\n    \n  }\n  \n  drug_tbl &lt;- tibble(\n    reportId = parse_number(reportId),\n    patientAge = parse_number(patientAge),\n    patientSex = parse_number(patientSex),\n    drugName = drugName,\n    reaction = reaction\n  )\n  \n  drug_tbl\n  \n}\n\n# Get the data tibbles from the API\ndrugs &lt;- get_fda_data(2010, 2019, 1000)\ndrugs2 &lt;- get_fda_data(2000, 2009, 1000)\n\n# Join multiple tables\ndrugs &lt;- drugs |&gt; \n  full_join(drugs2)\n\n# Write the csv file\nwrite.csv(drugs, \"drugs_tbl.csv\")\n\nOur Data:\n\nlibrary(tidyverse)\n\ndrugs &lt;- read.csv(\"drugs_tbl.csv\")\n\ndrugs |&gt; \n  slice_head(n=6)\n\n  X reportId patientAge patientSex   drugName\n1 1 10003301         NA          2  IBUPROFEN\n2 2 10003311         76          2   LETAIRIS\n3 3 10003312         43          2     ILARIS\n4 4 10003315         NA          1 RANOLAZINE\n5 5 10003317         46          1   BENLYSTA\n6 6 10003318         59          2  BELIMUMAB\n                                reaction\n1            Dyspepsia, Renal impairment\n2     Oedema peripheral, Fluid retention\n3            Pneumonia, Drug ineffective\n4                                  Death\n5                                       \n6 Tuberculosis of central nervous system\n\n\n\n\nDemonstrations of the Data\n\nlibrary(treemapify)\n\nWarning: package 'treemapify' was built under R version 4.4.3\n\ndrugs |&gt;\n  mutate(drugName = as.character(fct_lump_n(drugName, 100))) |&gt;\n  group_by(drugName) |&gt;\n  summarize(n = n()) |&gt;\n  mutate(drugName = ifelse(\n    nchar(drugName)&gt;7, \n    str_c(substr(drugName, start=1, stop=4), \"…\"),\n    drugName\n  )) |&gt;\n  ggplot(aes(area = n, fill = drugName, label = drugName)) +\n    geom_treemap() +\n    geom_treemap_text(colour = \"white\", place = \"centre\") +\n    labs(title = \"Drug Representation Among Serious Effects\") +\n    theme_minimal() +\n    scale_fill_viridis_d(option = \"G\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\ndrugs |&gt;\n  filter(reaction == \"Death\") |&gt;\n  mutate(drugName = as.character(fct_lump_min(drugName, 1))) |&gt;\n  group_by(drugName) |&gt;\n  summarize(n = n()) |&gt;\n  mutate(drugName = ifelse(\n    nchar(drugName)&gt;10, \n    str_c(substr(drugName, start=1, stop=6), \"…\"),\n    drugName\n  )) |&gt;\n  ggplot(aes(area = n, fill = drugName, label = drugName)) +\n    geom_treemap() +\n    geom_treemap_text(colour = \"white\", place = \"centre\") +\n    labs(title = \"Drug Representation Among Deaths\") +\n    theme_minimal() +\n    scale_fill_viridis_d(option = \"A\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\nThese tree maps give some indication of which drugs caused the most serious side effects. In both plots, we can see that the distribution is relatively even among the drugs, as it seems that most of them only occur one or two times. Lipitor stands out as having the most incidents, and we can see that it also has one death associated with it in the second plot. This plot also reveals that Glivec, while it had appeared benign enough, actually caused the highest number of deaths in the data.\n\ndrugs |&gt;\n  filter(!is.na(patientAge) & patientAge &lt; 100) |&gt;\n  ggplot(aes(x = patientAge)) +\n    geom_density(fill = \"lavender\", color = \"darkblue\", size = 1) + \n    theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nUnsurprisingly, the most common age for incidents in the data set is in the sixties. However, this plot also highlights that some of the drugs affected children."
  },
  {
    "objectID": "projects/UsedCars/UsedCars.html",
    "href": "projects/UsedCars/UsedCars.html",
    "title": "The US and EU Used Car Markets",
    "section": "",
    "text": "“A car (or automobile) is a wheeled motor vehicle that is used for transportation. Most definitions of cars say that they run primarily on roads, seat one to eight people, have four wheels, and mainly transport people instead of goods. The year 1886 is regarded as the birth year of the car, when German inventor Carl Benz patented his Benz Patent-Motorwagen. The car is considered an essential part of the developed economy” (Anusha Bellam).\nIn 2017, Carsten Bin Salman, daughter of the crown prince of Saudi Arabia Mohammad Bin Salman, was just old enough to get her drivers license, but was banned under Saudi Arabian law (women were not permitted to drive until 2018).\nCarsten decided that Germany and the United States were the best countries for her to move to, as they have a fruitful history of automotive vehicles and gender rights. However, being excommunicated from the Saudi Arabian royal family, Carsten is shopping on a budget. She also has very specific criteria for choosing the perfect 4-wheeled motor vehicle for her transportation. This car is such a crucial possession in her life that she will decide where to move to based on where she can find the perfect car to purchase."
  },
  {
    "objectID": "projects/UsedCars/UsedCars.html#background-information",
    "href": "projects/UsedCars/UsedCars.html#background-information",
    "title": "The US and EU Used Car Markets",
    "section": "",
    "text": "“A car (or automobile) is a wheeled motor vehicle that is used for transportation. Most definitions of cars say that they run primarily on roads, seat one to eight people, have four wheels, and mainly transport people instead of goods. The year 1886 is regarded as the birth year of the car, when German inventor Carl Benz patented his Benz Patent-Motorwagen. The car is considered an essential part of the developed economy” (Anusha Bellam).\nIn 2017, Carsten Bin Salman, daughter of the crown prince of Saudi Arabia Mohammad Bin Salman, was just old enough to get her drivers license, but was banned under Saudi Arabian law (women were not permitted to drive until 2018).\nCarsten decided that Germany and the United States were the best countries for her to move to, as they have a fruitful history of automotive vehicles and gender rights. However, being excommunicated from the Saudi Arabian royal family, Carsten is shopping on a budget. She also has very specific criteria for choosing the perfect 4-wheeled motor vehicle for her transportation. This car is such a crucial possession in her life that she will decide where to move to based on where she can find the perfect car to purchase."
  },
  {
    "objectID": "projects/UsedCars/UsedCars.html#price",
    "href": "projects/UsedCars/UsedCars.html#price",
    "title": "The US and EU Used Car Markets",
    "section": "Price",
    "text": "Price\nCarsten lost her entire trust fund when she was exiled from the Bin Salman clan, so car price is one of her biggest concerns. More importantly, she is extremely concerned about safety, and thus she only wants cars that are newer than 10 years old. We have done the dirty work for her, and made a bar chart to compare prices in the US and EU over time.\n\n\n\n\n\n\n\n\n\nAfter pouring over this information for hours, Cartsen decided that the US has more affordable used car prices. Although newer cars tend to have higher prices, the US has consistently had significantly cheaper used cars. She hasn’t fully decided which country, but this does give the US a competitive advantage."
  },
  {
    "objectID": "projects/UsedCars/UsedCars.html#brand",
    "href": "projects/UsedCars/UsedCars.html#brand",
    "title": "The US and EU Used Car Markets",
    "section": "Brand",
    "text": "Brand\nCarsten is also partial to French cars due to her quirky and fun personality and the quirky features seen on cars made by companies such as Citröen, Peugeot, and Renault. However, she also loves the reliability seen in Japanese cars, and the size of American cars. French cars are not sold in the US, whereas Japanese cars are sold on both continents, thus confounding her decision.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis treemap shows the most common car brands in US vs the EU. The most popular car brands in the EU are Volkswagen, Opel, Skoda, and Ford respectively, whereas the most popular brands in the US are Ford, Toyota, Jeep, and Hyundai. Carsten knows the most reliable and appealing brands for her are Subaru, Toyota, Renault, and Peugeot. This chart shows that there are no used Renault or Peugeot cars in the United States, but they take up a significant portion of the German used car market. On the other hand, there are no used Subaru cars in the German market but Toyota has a decent number of vehicles in the country, but Toyota and Subaru both are extremely prevalent in the United States used car market."
  },
  {
    "objectID": "projects/UsedCars/UsedCars.html#transmission",
    "href": "projects/UsedCars/UsedCars.html#transmission",
    "title": "The US and EU Used Car Markets",
    "section": "Transmission",
    "text": "Transmission\nCarsten also noted that she has never learned to drive a manual transmission vehicle, and doesn’t feel like learning now. Therefore, she would greatly prefer an automatic transmission vehicle. Additionally, she wants to live in a hilly and/or mountainous area, in which driving a manual transmission is much more challenging and demanding. As seen in this graph, automatic transmissions are much more prevalent in the US, whereas manuals are more prevalent in Europe. However, both countries have options with both types of transmissions. This is a very tricky spot to be in because Carsten may not be able to find an automatic car that also fits her price range and brand requirements."
  },
  {
    "objectID": "projects/UsedCars/UsedCars.html#horsepower",
    "href": "projects/UsedCars/UsedCars.html#horsepower",
    "title": "The US and EU Used Car Markets",
    "section": "Horsepower",
    "text": "Horsepower\nAlthough Carsten is a very practical person, she also enjoys having fun. She often falls asleep to the sound of engines revving, and dreams about street racing if she is ever allowed to have a license. In fact, on one of her trips abroad to the Abu Dhabi Grand Prix, she was able to partake in an F1 themed go-kart racing championship and confirmed her love of motorsport. Therefore, she wishes her vehicle to have as much horsepower as possible in order to have the ultimate driving experience each day she is behind the wheel.\nBased on this graph, we can see that more cars in the US have higher horepower when compared to the EU. Although used US cars are cheaper, they have more horsepower!\n\n\n\n\n\n\n\n\n\nBased on all these data, Carsten has decided that the US fits her bill the most in terms of which type of car she would like to buy. First, US cars were cheaper, second, she is still able to buy a Japanese car in the US, third, she has greater access to automatic transmission vehicles, and finally, cars sold in the US tend to have higher horsepower. Unfortunately she will have to abandon her love for French cars with this decision, but will be rewarded with the thrill of street racing, and the feeling of American pride flowing through her veins.\nSources: https://www.kaggle.com/datasets/anushabellam/cars-cars-2 (For the quote at the beginning of the paper)\nhttps://www.kaggle.com/datasets/mirosval/personal-cars-classifieds\nhttps://www.kaggle.com/datasets/ananaymital/us-used-cars-dataset\nAli, S., Alotaibi, R., Field, E., Swanson, K., Vyborny, K., & Daher, C. A. (2021). Two years, Two percent: Why are Saudi women still not driving? Alnahda. https://epod.cid.harvard.edu/sites/default/files/2021-12/AlNahda%20Blog_15Sep2021.pdf\nVoelk, T. (2020, March 4). Europe and the U.S. Share a Lot, Except When It Comes to Cars. The New York Times. https://www.nytimes.com/2020/03/04/automobiles/european-us-cars-automakers.html"
  },
  {
    "objectID": "projects/HDI/HDI.html",
    "href": "projects/HDI/HDI.html",
    "title": "The Most Important Factors in Determining Human Development",
    "section": "",
    "text": "Which quality of life measurements are most critical to improving a country’s human development index?"
  },
  {
    "objectID": "projects/MiniProject4/MiniProject4.html",
    "href": "projects/MiniProject4/MiniProject4.html",
    "title": "Mini Project 4",
    "section": "",
    "text": "When I say Taylor Swift, what’s the first thing that comes to mind? Probably love, heartbreak, or self-reflection. What about Drake?\nBut although we think we understand the common themes within each artist’s music, are these tropes backed up by their lyrics? And are these artists really as different as we think?\nTo answer this question, let’s start by analyzing basic information from a few artists.\nOne way we could differentiate between genres is through their style of writing. We can start by analyzing the length of words to see if there is a common pattern, using the str_length function.\n\n\n# A tibble: 4 × 2\n  Artist       avg_word_length\n  &lt;chr&gt;                  &lt;dbl&gt;\n1 Drake                   3.88\n2 Ed Sheeran              3.80\n3 Nicki Minaj             3.87\n4 Taylor Swift            3.92\n\n\nThis seems to have no correlation, as all word length averages are within 0.12 letters of each other. Maybe this will change if we look at the title length instead:\n\n\n# A tibble: 4 × 2\n  Artist       avg_title_length\n  &lt;chr&gt;                   &lt;dbl&gt;\n1 Drake                    14.0\n2 Ed Sheeran               23.0\n3 Nicki Minaj              14.8\n4 Taylor Swift             22.1\n\n\nFrom this table, we can see that Taylor Swift and Ed Sheeran have an average of 22/23 characters per title, while Drake and Nicki Minaj average about 14 characters per title.\nI’m also curious to see how many songs each artist has that have one-word titles. To accomplish this, I used str_detect with a regex to filter for only one-word titles.\n\n\n        Artist num_titles\n1        Drake         93\n2   Ed Sheeran         58\n3  Nicki Minaj         60\n4 Taylor Swift         69\n\n\nTime to start looking at the lyrics themselves. Below are charts for each artist showing the top 3 most common positive and negative words across all of their lyrics. To analyze the sentiments, these charts use Bing Sentiments.\n\n\n\n\n\n\n\n\n\nWe can see 2 main takeaways from these graphs. Firstly, all 5 of these artists have the exact same Top 3 positive words across all of their songs: Love, Like, and Right. These words are common across the Pop, Acoustic, and Rap genres. Secondly, we can see a difference in the styles of music based on the negative words used. Nicki Minaj and Drake, our two representatives from the Rap genre, have swear words as their Top 3 negatives. Ed Sheeran and Taylor Swift represent the Pop/Acoustic genre, with their Top 3 negative words being related to getting drunk and handling breakups.\nLet’s take a closer look at the songs that use these positive words, and see if we can find a difference in the sentiments. The first step is to filter for the words using str_detect and a regular expression, and then make the charts.\n\n\n\n\n\n\n\n\n\nThis graph shows the song title on the x axis, and the average sentiment on the y axis. Each graph shows a different artist, and the color represents which positive words are present in that song. These graphs only take into account songs that contain “Like”, “Love”, or “Right”, which is most songs, so we can still analyze general trends.\nThese charts aren’t super helpful since there’s so much going on, but we can still see a few insights. Most obviously, Nicki Minaj has mostly negative songs, and Taylor Swift and Ed Sheeran have mostly positive songs. Drake is all over the place, with a mainly even number of positive and negative songs. This is similar to what we would expect based on their styles of music.\nWe can also see that songs that mention “Love” are commonly positive, with very few being negative. “Like” and “Love” don’t seem to have much effect on the overall song sentiment.\nNext, let’s analyze each artist’s sentiments over time to see if there are any shifts throughout each artist’s career. This chart uses the Afinn Sentiments to analyze the text.\n\n\n\n\n\n\n\n\n\nWe can see that artists generally follow the same sentiments throughout their careers, with the exception of a few albums. This chart further emphasizes our previous conclusions. Drake has both positive and negative songs, so his music averages out to be fairly neutral. Nicki Minaj has almost exclusively negative music, while Ed Sheeran and Taylor Swift are almost exclusively positive.\nWe’ve identified a clear difference between these 2 genres (Rap being negative, and Pop/Acoustic being positive), but let’s get a clearer look on which words differentiate each of the different artists.\n\n\n\n\n\n\n\n\n\nIn these plots, we can see which words are common in one artist’s lyrics and not another. This isn’t super interesting, since most differentiating words are the artist’s name or super specific phrases that are unique to one artist. For example, I would be shocked if any other artist besides Ed Sheeran uses “ohiohiohiohi” in their lyrics.\nLet’s see if this changes when we consider 2-word combinations.\n\n\n\n\n\n\n\n\n\nHere we can see which two-word combinations best identify each artist. For some reason, one common differentiating term is the artist’s name. Although they reference themselves occasionally, this is mostly due to the inclusion of which artist is singing for songs that feature multiple artists. For example, in Taylor Swift’s song Exile ft. Bon Iver, this lyrics in this dataset say “Taylor Swift” before her singing parts and “Justin Vernon” before his singing parts. Again, these phrases are mainly just silly phrases or made-up terms, and isn’t super useful."
  }
]